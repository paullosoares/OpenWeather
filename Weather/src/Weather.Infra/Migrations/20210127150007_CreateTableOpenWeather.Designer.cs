// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Infra.Data;

namespace Weather.Infra.Migrations
{
    [DbContext(typeof(OpenWeatherContext))]
    [Migration("20210127150007_CreateTableOpenWeather")]
    partial class CreateTableOpenWeather
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Weather.Domain.Models.OpenWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Cod")
                        .HasColumnType("int");

                    b.Property<int>("Dt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Timezone")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OpenWeather");
                });

            modelBuilder.Entity("Weather.Domain.Models.OpenWeather", b =>
                {
                    b.OwnsOne("Weather.Domain.Models.OpenWeatherCoordinate", "Coord", b1 =>
                        {
                            b1.Property<Guid>("OpenWeatherId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("Lat")
                                .HasColumnName("Latitude")
                                .HasColumnType("real");

                            b1.Property<float>("Lon")
                                .HasColumnName("Longitude")
                                .HasColumnType("real");

                            b1.HasKey("OpenWeatherId");

                            b1.ToTable("OpenWeather");

                            b1.WithOwner()
                                .HasForeignKey("OpenWeatherId");
                        });

                    b.OwnsOne("Weather.Domain.Models.OpenWeatherMain", "Main", b1 =>
                        {
                            b1.Property<Guid>("OpenWeatherId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("FeelsLike")
                                .HasColumnName("FeelsLike")
                                .HasColumnType("real");

                            b1.Property<int>("Humidity")
                                .HasColumnName("Humidity")
                                .HasColumnType("int");

                            b1.Property<int>("Pressure")
                                .HasColumnName("Pressure")
                                .HasColumnType("int");

                            b1.Property<float>("Temp")
                                .HasColumnName("Temp")
                                .HasColumnType("real");

                            b1.Property<float>("TempMax")
                                .HasColumnName("TempMax")
                                .HasColumnType("real");

                            b1.Property<float>("TempMin")
                                .HasColumnName("TempMin")
                                .HasColumnType("real");

                            b1.HasKey("OpenWeatherId");

                            b1.ToTable("OpenWeather");

                            b1.WithOwner()
                                .HasForeignKey("OpenWeatherId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
